#!/usr/bin/env python
## Copyright (C) 2009 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import i7500_common as common
import re
import copy
import os, sys

LOCAL_DIR = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))
RELEASETOOLS_DIR = os.path.abspath(os.path.join(LOCAL_DIR, '../../../build/tools/releasetools'))

# Add releasetools directory to python path
sys.path.append(RELEASETOOLS_DIR)

# Import the existing file so we just have to rewrite the modules we need.
# This is a nasty hack as the filename doesn't end in .py, but it works
filename = os.path.join(RELEASETOOLS_DIR, "ota_from_target_files")
ota_from_target_files = common.load_module_from_file('ota_from_target_files', filename)

from ota_from_target_files import *
#import encore_edify_generator as edify_generator
import edify_generator

__doc__ = ota_from_target_files.__doc__


#def FullOTA_Assertions(info):
#  """Ensure /system is not mounted"""
#  info.script.UnMount("/system");
#  CopyDataFiles(info.input_zip, info.output_zip)

def CopyDataFiles(input_zip, output_zip=None):
  """Copies files underneath system/ in the input zip to the output
  zip.  Populates the Item class with their metadata, and returns a
  list of symlinks.  output_zip may be None, in which case the copy is
  skipped (but the other side effects still happen).  substitute is an
  optional dict of {output filename: contents} to be output instead of
  certain input files.
  """

  for info in input_zip.infolist():
    if info.filename.startswith("DATA/"):
      basefilename = info.filename[5:]
      info2 = copy.copy(info)
      fn = info2.filename = "data/" + basefilename
      if output_zip is not None:
        data = input_zip.read(info.filename)
        output_zip.writestr(info2, data)
#      if fn.endswith("/"):
#        Item.Get(fn[:-1], dir=True)
#      else:
#        Item.Get(fn, dir=False)

#def IncrementalOTA_Assertions(info):

#def FullOTA_InstallEnd(info):
#  InstallDataFiles(info.script)

#def InstallDataFiles(script):
#  script.Mount("ext4", "/dev/block/mmcblk0p1", "/data")
#  script.UnpackPackageDir("data", "/data")
#  script.SetPermissions("/data/app", 1000, 1000, 0771)
#  script.SetPermissions("/data/app_s", 1000, 1000, 0771)
#  script.MakeSymlinks([("/data/app_s","/system/app")])

#def IncrementalOTA_InstallEnd(info):
#TODO :/

def CopySystemFiles(input_zip, output_zip=None,
                    substitute=None):
  """Copies files underneath system/ in the input zip to the output
  zip.  Populates the Item class with their metadata, and returns a
  list of symlinks.  output_zip may be None, in which case the copy is
  skipped (but the other side effects still happen).  substitute is an
  optional dict of {output filename: contents} to be output instead of
  certain input files.
  """

  symlinks = []

  for info in input_zip.infolist():
    if info.filename.startswith("SYSTEM/"):
      basefilename = info.filename[7:]

      if basefilename.startswith("app/"):
	      basefilename = "data/app_s" + basefilename[3:]
      else:
        basefilename = "system/" + basefilename

      print "File " + basefilename
      if IsSymlink(info):
        symlinks.append((input_zip.read(info.filename),
                         basefilename))
      else:
        info2 = copy.copy(info)
        fn = info2.filename = basefilename
        if substitute and fn in substitute and substitute[fn] is None:
          continue
        if output_zip is not None:
          if substitute and fn in substitute:
            data = substitute[fn]
          else:
            data = input_zip.read(info.filename)
          output_zip.writestr(info2, data)
        if fn.endswith("/"):
          Item.Get(fn[:-1], dir=True)
        else:
          Item.Get(fn, dir=False)

  symlinks.sort()
  return symlinks
ota_from_target_files.CopySystemFiles = CopySystemFiles


def WriteFullOTAPackage(input_zip, output_zip):
  # TODO: how to determine this?  We don't know what version it will
  # be installed on top of.  For now, we expect the API just won't
  # change very often.
  script = edify_generator.EdifyGenerator(3, OPTIONS.info_dict)

  metadata = {"post-build": GetBuildProp("ro.build.fingerprint", input_zip),
              "pre-device": GetBuildProp("ro.product.device", input_zip),
              "post-timestamp": GetBuildProp("ro.build.date.utc", input_zip),
              }

  device_specific = common.DeviceSpecificParams(
      input_zip=input_zip,
      input_version=OPTIONS.info_dict["recovery_api_version"],
      output_zip=output_zip,
      script=script,
      input_tmp=OPTIONS.input_tmp,
      metadata=metadata,
      info_dict=OPTIONS.info_dict)

  AppendAssertions(script, input_zip)
  device_specific.FullOTA_Assertions()
  if OPTIONS.backuptool:
    script.RunBackup("backup")

  script.ShowProgress(0.5, 0)

  if OPTIONS.wipe_user_data:
    script.FormatPartition("/data")
    script.FormatPartition("/dbdata")
    script.FormatPartition("/userdata")

# /system mounted by default under Drakaz recovery
  script.script.append('unmount("/system");')
  script.FormatPartition("/system")
  script.Mount("/system")
  script.Mount("/data")
  script.UnpackPackageDir("recovery", "/system")
  script.UnpackPackageDir("system", "/system")
  script.UnpackPackageDir("data", "/data")

  script.SetPermissions("/data/app_s", 1000, 1000, 0771)
  script.MakeSymlinks([("/data/app_s","/system/app")])

  symlinks = CopySystemFiles(input_zip, output_zip)
  script.MakeSymlinks(symlinks)

  boot_img = common.File("boot.img", common.BuildBootableImage(
      os.path.join(OPTIONS.input_tmp, "BOOT")))
#  recovery_img = common.File("recovery.img", common.BuildBootableImage(
#      os.path.join(OPTIONS.input_tmp, "RECOVERY")))
#  MakeRecoveryPatch(output_zip, recovery_img, boot_img)

  Item.GetMetadata(input_zip)
  Item.Get("system").SetPermissions(script)

  common.CheckSize(boot_img.data, "boot.img", OPTIONS.info_dict)
  common.ZipWriteStr(output_zip, "boot.img", boot_img.data)
  script.ShowProgress(0.2, 0)

  if OPTIONS.backuptool:
    script.ShowProgress(0.2, 10)
    script.RunBackup("restore")

#  script.RunVerifyCachePartitionSize()

  script.ShowProgress(0.2, 10)
  script.WriteRawImage("/boot", "boot.img")

  script.ShowProgress(0.1, 0)
  device_specific.FullOTA_InstallEnd()

  if OPTIONS.extra_script is not None:
    script.AppendExtra(OPTIONS.extra_script)

  script.UnmountAll()
  script.AddToZip(input_zip, output_zip)
  WriteMetadata(metadata, output_zip)
ota_from_target_files.WriteFullOTAPackage = WriteFullOTAPackage

def WriteIncrementalOTAPackage(target_zip, source_zip, output_zip):
    print "Incremental OTA Packages are not support on the B&N encore at this time"
    sys.exit(1)
ota_from_target_files.WriteIncrementalOTAPackage = WriteIncrementalOTAPackage

if __name__ == '__main__':
  try:
    main(sys.argv[1:])
  except common.ExternalError, e:
    print
    print "   ERROR: %s" % (e,)
    print
    sys.exit(1)
